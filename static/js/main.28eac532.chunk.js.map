{"version":3,"sources":["context.js","component/test/index.js","serviceWorker.js","index.js","App.js"],"names":["ThemeContext","React","createContext","ThemeProvider","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","theme","toggleTheme","setState","_ref","inherits","createClass","key","value","react_default","a","createElement","Provider","onClick","props","children","Component","LanguageContext","LanguageProvider","_React$Component2","_getPrototypeOf3","_this2","_len2","_key2","language","toggleLanguage","_ref2","TestComponent","useContext","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","_ref3","context_LanguageProvider","context_ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28eac532.chunk.js","sourcesContent":["import React from 'react';\n\nexport const ThemeContext = React.createContext('light')\nexport class ThemeProvider extends React.Component {\n  state= {theme: 'light'}\n\n\n  toggleTheme = () => {\n    this.setState(({theme}) => ({\n      theme: theme === 'light' ? 'dark' : 'light',\n    }))\n  }\n\n  render() {\n    return (\n      <ThemeContext.Provider value={this.state.theme}>\n        <button onClick={this.toggleTheme}>toggle theme</button>\n        {this.props.children}\n      </ThemeContext.Provider>\n    )\n  }\n\n}\n\nexport const LanguageContext = React.createContext('en');\n\nexport class LanguageProvider extends React.Component {\n  state= {language: 'en'}\n\n\n  toggleLanguage = () => {\n    this.setState(({language}) => ({\n      language: language === 'en' ? 'es' : 'en',\n    }))\n  }\n\n  render() {\n    return (\n      <LanguageContext.Provider value={this.state.language}>\n        <button onClick={this.toggleLanguage}>toggle Language</button>\n        {this.props.children}\n      </LanguageContext.Provider>\n    )\n  }\n}\n\nexport function AppProviders({children}) {\n  return (\n    <LanguageProvider>\n      <ThemeProvider>\n        {children}\n      </ThemeProvider>\n    </LanguageProvider>\n  )\n}\n","import React, {useContext} from 'react';\n\nimport { LanguageContext } from '../../context';\n\nexport default function TestComponent() {\n    const language = useContext(LanguageContext);\n    return (\n        <React.Fragment>\n            <span>deep comp {language}</span>\n        </React.Fragment>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { AppProviders } from './context';\n\nReactDOM.render(\n    <AppProviders>\n        <App />\n    </AppProviders>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useContext } from 'react';\nimport './App.css';\n\nimport { ThemeContext, LanguageContext } from './context';\n\nimport TestComponent from './component/test';\n\nexport default function App() {\n  const language = useContext(LanguageContext);\n  const theme = useContext(ThemeContext);\n    return (\n      <React.Fragment>\n        <br />\n        <div>{language} and {theme}</div>\n        <h3>test</h3>\n        <TestComponent />\n      </React.Fragment>\n    );\n}\n"],"sourceRoot":""}